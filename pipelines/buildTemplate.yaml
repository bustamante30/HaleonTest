parameters:  
  - name: environment
  - name: ArtifactName
  - name: BuildNumber
  - name: TerraformBackendServiceConnection

jobs:
  - job: Job_Build
    displayName: Build
    
    pool:
        vmImage: "ubuntu-20.04"
    
    variables:
      CI: "true"
      ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
        NX_BRANCH: "$(System.PullRequest.PullRequestNumber)"
        TARGET_BRANCH: "$(replace(variables['System.PullRequest.TargetBranch'], 'refs/heads/', 'origin/'))"
        BASE_SHA: "$(git merge-base $(TARGET_BRANCH) HEAD)"
      ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
        NX_BRANCH: "$(Build.SourceBranchName)"
        BASE_SHA: "$(git rev-parse HEAD~1)"
      HEAD_SHA: "$(git rev-parse HEAD)"

    steps:
      - checkout: self
        fetchDepth: 0 #disable shallow fetch

      - task: NodeTool@0
        inputs:
            versionSpec: "18.15.x"
        displayName: "Install Node.js"

      - task: Bash@3
        name: BuildAgentIP
        inputs:
          targetType: 'inline'
          script: |
            ipaddress=$(curl -s http://ipinfo.io/ip)
            echo "##vso[task.setvariable variable=address;isOutput=true;]$ipaddress"

      - task: AzureCLI@2
        displayName: 'Add IP to Key Vault Firewall'
        inputs:
          azureSubscription: '${{ parameters.TerraformBackendServiceConnection }}'
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            # Add IP to Key Vault Firewall
            az keyvault network-rule add --name '$(KeyVaultName)' --ip-address "$(BuildAgentIP.address)/32"

      - task: AzureKeyVault@2
        displayName: 'Get Azure KeyVault'
        inputs:
          azureSubscription: '${{ parameters.TerraformBackendServiceConnection }}'
          KeyVaultName: 'sgsco-terraform-kv'
          SecretsFilter: '*'
          RunAsPreJob: false

      - task: PowerShell@2
        displayName: 'Tag KeyVault Secrets to env'
        inputs:
          targetType: 'inline'
          script: |
            Write-Host "Using the mapped env var for this task works and is VITE_B2C_KNOWN_AUTHORITY: $env:VITE_B2C_KNOWN_AUTHORITY"
            $env:VITE_B2C_KNOWN_AUTHORITY -eq "sgscophoton.b2clogin.com"
        env:
          # the recommended way to map to an env variable
          VITE_MYSGSURL: $(VITEMYSGSURL)
          VITE_AAD_CLIEND_ID: $(VITEAADCLIENDID)
          VITE_AAD_AUTHORITY: $(VITEAADAUTHORITYY)
          VITE_AAD_TOKEN_SCOPE: $(VITEAADTOKENSCOPE)
          VITE_AAD_REDIRECT_URL: $(VITEAADREDIRECTURL)
          VITE_LOGOUT_URL: $(VITELOGOUTURL)
          VITE_B2C_CLIENT_ID: $(VITEB2CCLIENTID)
          VITE_B2C_TOKEN_SCOPE: $(VITEB2CTOKENSCOPE)
          VITE_B2C_REDIRECT_URL: $(VITEB2CREDIRECTURL)
          VITE_B2C_AUTHORITY: $(VITEB2CAUTHORITY)
          VITE_B2C_KNOWN_AUTHORITY: $(VITEB2CKNOWNAUTHORITY)
      
      - bash: |
          echo "My env variable: $VITE_B2C_KNOWN_AUTHORITY"
          if [ "$VITE_B2C_KNOWN_AUTHORITY" = "$(VITEB2CKNOWNAUTHORITY)" ]; then
              echo "String are equal."
          else
              echo "String are not equal."
          fi
          echo "--------------------------------------------"
        env:
          VITE_B2C_KNOWN_AUTHORITY: $(VITEB2CKNOWNAUTHORITY)

      - script: |
          echo 'ResourceGroupName: $(ResourceGroupName)'
          echo 'VITEMYSGSURL-KV: $(VITEMYSGSURL)'
          echo 'VITE_B2C_KNOWN_AUTHORITY: $VITE_B2C_KNOWN_AUTHORITY'
        displayName: 'Print KeyVault variables'
        env:
          VITE_B2C_KNOWN_AUTHORITY: $(VITEB2CKNOWNAUTHORITY)

      - script: |
          npm install
        displayName: "npm install"

      - script: |
          npm i
        displayName: "Install dependencies"

        # Set Azure Devops CLI default settings
      - bash: az devops configure --defaults organization="$(System.TeamFoundationCollectionUri)" project="$(System.TeamProject)"
        displayName: "Set default Azure DevOps organization and project"

        # Get last successful commit from Azure Devops CLI
      - bash: |
          LAST_SHA=$(az pipelines build list --branch "$(Build.SourceBranchName)" --definition-ids "$(System.DefinitionId)" --result succeeded --top 1 --query "[0].triggerInfo.\"ci.sourceSha\"")
          if [ -z "$LAST_SHA" ]
          then
            LAST_SHA=$DEFAULT_BASE_SHA
          fi
          echo "Last successful commit SHA: $LAST_SHA"
          echo "##vso[task.setvariable variable=BASE_SHA]$LAST_SHA"
        displayName: "Get last successful commit SHA"
        env:
          AZURE_DEVOPS_EXT_PAT: "$(System.AccessToken)"

      # - script: |
      #     npm run dev
      #   displayName: "npm run dev"
      - script: |
          npm run build
        displayName: "Full Build"

      # - script: |
      #     npm run test:unit
      #   displayName: "Unit Tests"

      - bash: |
          if [ -d $(system.defaultworkingdirectory)/dist ]; then
            echo "##vso[task.setVariable variable=IMGCARRIERAPPBUILT]true"
          fi

      - task: CopyFiles@2
        displayName: 'Copy staticwebapp.config to dist'
        condition: succeededOrFailed()
        inputs:
          SourceFolder: '$(System.Defaultworkingdirectory)'
          Contents: '**/staticwebapp.config.json'
          TargetFolder: '$(system.defaultworkingdirectory)/dist'
          OverWrite: true

      - task: ArchiveFiles@2
        condition: eq(variables.IMGCARRIERAPPBUILT, 'true')
        inputs:
          rootFolderOrFile: "$(system.defaultworkingdirectory)/dist"
          archiveType: "zip"
          archiveFile: "$(Build.ArtifactStagingDirectory)/${{ parameters.environment }}/${{ parameters.BuildNumber }}"
          includeRootFolder: false
        enabled: true
        displayName: "Zip ImageCarrier-UI app"

      - task: PublishBuildArtifacts@1
        condition: or( eq(variables.HOSTAPPBUILT, 'true'), eq(variables.IMGCARRIERAPPBUILT, 'true'))
        inputs:
          PathtoPublish: $(Build.ArtifactStagingDirectory)/${{ parameters.environment }}/
          artifactName: '${{ parameters.ArtifactName }}'

      - task: AzureCLI@2
        displayName: 'Remove IP from Key Vault Firewall'
        inputs:
          azureSubscription: '${{ parameters.TerraformBackendServiceConnection }}'
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            # Remove IP from Key Vault Firewall
            az keyvault network-rule remove --name '$(KeyVaultName)' --ip-address "$(BuildAgentIP.address)/32"
        
      - bash: |
          if [ -f "$(Build.ArtifactStagingDirectory)/${{ parameters.environment }}/${{ parameters.BuildNumber }}" ]; then
            echo "Source directory exists."
          else
            echo "Source directory does not exist."
            exit 1
          fi
        displayName: 'Check source directory existence'
