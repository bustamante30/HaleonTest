parameters:
  - name: environment
  - name: ArtifactName
  - name: BuildNumber
  - name: AzureServiceConnName

jobs:
  - job: Job_Build
    displayName: Build

    pool:
      vmImage: "ubuntu-latest"

    variables:
      CI: "true"
      ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
        NX_BRANCH: "$(System.PullRequest.PullRequestNumber)"
        TARGET_BRANCH: "$(replace(variables['System.PullRequest.TargetBranch'], 'refs/heads/', 'origin/'))"
        BASE_SHA: "$(git merge-base $(TARGET_BRANCH) HEAD)"
      ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
        NX_BRANCH: "$(Build.SourceBranchName)"
        BASE_SHA: "$(git rev-parse HEAD~1)"
      HEAD_SHA: "$(git rev-parse HEAD)"

    steps:
      - checkout: self
        fetchDepth: 0 #disable shallow fetch

      - task: NodeTool@0
        inputs:
          versionSpec: "18.15.x"
        displayName: "Install Node.js"

      - script: |
          npm install
        displayName: "npm install"

      - script: |
          npm i
        displayName: "Install dependencies"

        # Set Azure Devops CLI default settings
      - bash: az devops configure --defaults organization="$(System.TeamFoundationCollectionUri)" project="$(System.TeamProject)"
        displayName: "Set default Azure DevOps organization and project"

      - task: AzureKeyVault@2
        displayName: "Get Azure Secrets"
        inputs:
          azureSubscription: "${{ parameters.AzureServiceConnName }}"
          KeyVaultName: "$(KeyVaultName)"
          SecretsFilter: |
            ${{ parameters.environment }}-Imgcarrier-ui-ViteAadCliendId,
            ${{ parameters.environment }}-Imgcarrier-ui-ViteAadTokenScope,
            ${{ parameters.environment }}-Imgcarrier-ui-ViteB2CClientId,
            ${{ parameters.environment }}-Imgcarrier-ui-ViteB2CTokenScope,
            ${{ parameters.environment }}-Imgcarrier-ui-ViteServiceNowInternalUrl,
            ${{ parameters.environment }}-Imgcarrier-ui-ViteOcpApimgmtSubscriptionKey,
            ${{ parameters.environment }}-Imgcarrier-ui-ViteAppinsightsInstrumentationkey
          RunAsPreJob: false

      - script: |
          echo "Tag azure secrets to environment variables"
          echo "##vso[task.setvariable variable=VITE_AAD_CLIEND_ID]$(${{ parameters.environment }}-Imgcarrier-ui-ViteAadCliendId)"
          echo "##vso[task.setvariable variable=VITE_AAD_TOKEN_SCOPE]$(${{ parameters.environment }}-Imgcarrier-ui-ViteAadTokenScope)"
          echo "##vso[task.setvariable variable=VITE_B2C_CLIENT_ID]$(${{ parameters.environment }}-Imgcarrier-ui-ViteB2CClientId)"
          echo "##vso[task.setvariable variable=VITE_B2C_TOKEN_SCOPE]$(${{ parameters.environment }}-Imgcarrier-ui-ViteB2CTokenScope)"
          echo "##vso[task.setvariable variable=VITE_SERVICE_NOW_INTERNAL_URL]$(${{ parameters.environment }}-Imgcarrier-ui-ViteServiceNowInternalUrl)"
          echo "##vso[task.setvariable variable=VITE_OCP_APIM_SUBSCRIPTION_KEY]$(${{ parameters.environment }}-Imgcarrier-ui-ViteOcpApimgmtSubscriptionKey)"
          echo "##vso[task.setvariable variable=VITE_APPINSIGHTS_INSTRUMENTATIONKEY]$(${{ parameters.environment }}-Imgcarrier-ui-ViteAppinsightsInstrumentationkey)"
        displayName: "Configure env variables"

        # Get last successful commit from Azure Devops CLI
      - bash: |
          LAST_SHA=$(az pipelines build list --branch "$(Build.SourceBranchName)" --definition-ids "$(System.DefinitionId)" --result succeeded --top 1 --query "[0].triggerInfo.\"ci.sourceSha\"")
          if [ -z "$LAST_SHA" ]
          then
            LAST_SHA=$DEFAULT_BASE_SHA
          fi
          echo "Last successful commit SHA: $LAST_SHA"
          echo "##vso[task.setvariable variable=BASE_SHA]$LAST_SHA"
        displayName: "Get last successful commit SHA"
        env:
          AZURE_DEVOPS_EXT_PAT: "$(System.AccessToken)"

      # - script: |
      #     npm run dev
      #   displayName: "npm run dev"

      - script: |
          npm run build
        displayName: "Full Build"

      - bash: |
          if [ -d $(system.defaultworkingdirectory)/dist ]; then
            echo "##vso[task.setVariable variable=IMGCARRIERAPPBUILT]true"
          fi

      - script: |
          echo Write your commands here
          npx playwright install --with-deps
          npm cache clean --force
          echo Hello World
        displayName: "Install Playwright browsers"

      - script: |
          npx playwright test
        displayName: "Run Playwright tests"
        env:
          CI: 'true'
      
      - task: CopyFiles@2
        displayName: "Copy staticwebapp.config to dist"
        condition: succeededOrFailed()
        inputs:
          SourceFolder: "$(System.Defaultworkingdirectory)"
          Contents: "**/staticwebapp.config.json"
          TargetFolder: "$(system.defaultworkingdirectory)/dist"
          OverWrite: true

      - task: ArchiveFiles@2
        condition: eq(variables.IMGCARRIERAPPBUILT, 'true')
        inputs:
          rootFolderOrFile: "$(system.defaultworkingdirectory)/dist"
          archiveType: "zip"
          archiveFile: "$(Build.ArtifactStagingDirectory)/${{ parameters.environment }}/${{ parameters.BuildNumber }}"
          includeRootFolder: false
        enabled: true
        displayName: "Zip ImageCarrier-UI app"

      - task: PublishTestResults@2
        displayName: 'Publish test results'
        inputs:
          searchFolder: 'test-results'
          testResultsFormat: 'JUnit'
          testResultsFiles: 'e2e-junit-results.xml'
          mergeTestResults: true
          failTaskOnFailedTests: true
          testRunTitle: 'My End-To-End Tests'
        condition: succeededOrFailed()

      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: playwright-report
          artifact: playwright-report
          publishLocation: 'pipeline'
        condition: succeededOrFailed()
      
      - task: PublishBuildArtifacts@1
        condition: eq(variables.IMGCARRIERAPPBUILT, 'true')
        inputs:
          PathtoPublish: $(Build.ArtifactStagingDirectory)/${{ parameters.environment }}/
          artifactName: "${{ parameters.ArtifactName }}"

      - bash: |
          if [ -f "$(Build.ArtifactStagingDirectory)/${{ parameters.environment }}/${{ parameters.BuildNumber }}" ]; then
            echo "Source directory exists."
          else
            echo "Source directory does not exist."
            exit 1
          fi
        displayName: "Check source directory existence"
